// 매칭되는 것이 있나 없나 비교하는 것이 '정규표현식'이다.
// const x = new RegExp("~~~");

// 플래그 문자
// /~~~/g : 앞에 일치하는 부분만 대체
// /~~~/gi : 대소문자 구분X (ig도 가능. 순서X)
const reg01 = /\d{2,}/gi;

const str = "hello123";

const result = str.replace(reg01, 'ㅎ');

console.log(result);



// 아래와 같은 메소드들이 있다. 
/*
    RegExp 객체에서 제공하는 메소드
        객체.test(문자열) : 문자열에 정규식 패턴을 만족하는 값이 있으면 true, 없으면 false를 리턴한다.
        객체.exec(문자열) : 문자열에 정규식 패턴을 만족하는 값이 있으면 처음 매치된 문자열 리턴한다.
    
    String 객체에서 정규 표현식 객체를 이용하는 메소드
        문자열.match(정규식) : 문자열에서 정규식 패턴의 값과 일치하는 값을 리턴한다.
        문자열.replace(정규식, 바꿀값) : 문자열에서 정규식 패턴의 값과 일치하는 부분을 바꿀값으로 변경한다.
        문자열.search(정규식) : 문자열에서 정규식 패턴의 값과 일치하지 부분의 시작 인덱스를 리턴한다.
        문자열.split(정규식) : 문자열에서 정규식 패턴의 값과 일치하는 값을 구분자로 하여 배열을 생성하여 리턴한다.
*/

/*
    반복 검색
    {m,n}은 앞선 패턴이 최소 m번 최대 n번 반복되는 문자열을 의미한다.
    +는 앞선 패턴이 최소 한 번 이상 반복되는 문자열을 의미한다.
    ?는 앞선 패턴이 최대 한 번 이상 반복되는 문자열을 의미한다.

    
    문자열의 앞, 뒤 구분
    ^는 문자열의 시작을 의미한다.
    $는 문자열의 마지막을 의미한다.

        
    OR 검색
    [...] 내의 문자들 중 하나라도 존재할 경우를 의미한다.

    
    임의의 문자열 검색
    .은 임의의 문자 한 개를 의미하고, 문자 내용은 무엇이든 상관없다.

  \d : 숫자를 의미한다.
  \D : 숫자가 아닌 문자를 의미한다.
  \w : 알파벳, 숫자, 언더 스코어(_)를 의미한다.
  \W : 알파벳, 숫자, 언더 스코어(_)가 아닌 문자를 의미한다.
  \s : 공백 문자를 의미한다. (띄어쓰기, 탭, 줄바꿈)
  \S : 공백 문자가 아닌 문자를 의미한다.
*/
